/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider, BaseWalletLocked, AbstractAddress } from "fuels";
import { Interface, Contract } from "fuels";
import type {
  IdoContractAbi,
  IdoContractAbiInterface,
} from "../IdoContractAbi";
const _abi = {
  types: [
    {
      typeId: 0,
      type: "()",
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: "(_, _)",
      components: [
        {
          name: "__tuple_element",
          type: 11,
          typeArguments: null,
        },
        {
          name: "__tuple_element",
          type: 11,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 2,
      type: "(_, _, _, _, _)",
      components: [
        {
          name: "__tuple_element",
          type: 11,
          typeArguments: null,
        },
        {
          name: "__tuple_element",
          type: 11,
          typeArguments: null,
        },
        {
          name: "__tuple_element",
          type: 11,
          typeArguments: null,
        },
        {
          name: "__tuple_element",
          type: 11,
          typeArguments: null,
        },
        {
          name: "__tuple_element",
          type: 11,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 3,
      type: "b256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 4,
      type: "bool",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 5,
      type: "enum IdoError",
      components: [
        {
          name: "ListLengthError",
          type: 0,
          typeArguments: null,
        },
        {
          name: "IValueError",
          type: 0,
          typeArguments: null,
        },
        {
          name: "KValueError",
          type: 0,
          typeArguments: null,
        },
        {
          name: "CliffRateError",
          type: 0,
          typeArguments: null,
        },
        {
          name: "TokenCliffRateError",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Freezed",
          type: 0,
          typeArguments: null,
        },
        {
          name: "ClaimFreezed",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotOwner",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotPhaseBid",
          type: 0,
          typeArguments: null,
        },
        {
          name: "SharesNotEnough",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotPhaseBidOrCalm",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotPhaseExe",
          type: 0,
          typeArguments: null,
        },
        {
          name: "AlreadySettled",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 6,
      type: "generic T",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 7,
      type: "raw untyped ptr",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 8,
      type: "struct Info",
      components: [
        {
          name: "address_list",
          type: 10,
          typeArguments: [
            {
              name: "",
              type: 3,
              typeArguments: null,
            },
          ],
        },
        {
          name: "timeline",
          type: 10,
          typeArguments: [
            {
              name: "",
              type: 11,
              typeArguments: null,
            },
          ],
        },
        {
          name: "value_list",
          type: 10,
          typeArguments: [
            {
              name: "",
              type: 11,
              typeArguments: null,
            },
          ],
        },
        {
          name: "switches",
          type: 10,
          typeArguments: [
            {
              name: "",
              type: 4,
              typeArguments: null,
            },
          ],
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 9,
      type: "struct RawVec",
      components: [
        {
          name: "ptr",
          type: 7,
          typeArguments: null,
        },
        {
          name: "cap",
          type: 11,
          typeArguments: null,
        },
      ],
      typeParameters: [6],
    },
    {
      typeId: 10,
      type: "struct Vec",
      components: [
        {
          name: "buf",
          type: 9,
          typeArguments: [
            {
              name: "",
              type: 6,
              typeArguments: null,
            },
          ],
        },
        {
          name: "len",
          type: 11,
          typeArguments: null,
        },
      ],
      typeParameters: [6],
    },
    {
      typeId: 11,
      type: "u64",
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [
        {
          name: "to",
          type: 3,
          typeArguments: null,
        },
      ],
      name: "bid",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "to",
          type: 3,
          typeArguments: null,
        },
        {
          name: "amount_",
          type: 11,
          typeArguments: null,
        },
      ],
      name: "cancel",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "to",
          type: 3,
          typeArguments: null,
        },
      ],
      name: "claim_bid",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "amount",
          type: 11,
          typeArguments: null,
        },
      ],
      name: "claim_lp_token",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "user_address",
          type: 3,
          typeArguments: null,
        },
      ],
      name: "get_claimable_token",
      output: {
        name: "",
        type: 1,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "price",
          type: 11,
          typeArguments: null,
        },
      ],
      name: "get_expected_price",
      output: {
        name: "",
        type: 11,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_info",
      output: {
        name: "",
        type: 8,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_lp_token_claimable",
      output: {
        name: "",
        type: 11,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_settle_result",
      output: {
        name: "",
        type: 2,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_shares",
      output: {
        name: "",
        type: 1,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "adderss_list",
          type: 10,
          typeArguments: [
            {
              name: "",
              type: 3,
              typeArguments: null,
            },
          ],
        },
        {
          name: "timeline",
          type: 10,
          typeArguments: [
            {
              name: "",
              type: 11,
              typeArguments: null,
            },
          ],
        },
        {
          name: "value_list",
          type: 10,
          typeArguments: [
            {
              name: "",
              type: 11,
              typeArguments: null,
            },
          ],
        },
        {
          name: "switches",
          type: 10,
          typeArguments: [
            {
              name: "",
              type: 4,
              typeArguments: null,
            },
          ],
        },
      ],
      name: "initialize",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [],
      name: "settle",
      output: {
        name: "",
        type: 4,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: 0,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 1,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 2,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 3,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 4,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 5,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 6,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 7,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 8,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 9,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 10,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 11,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 12,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 13,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 14,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 15,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 16,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 17,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 18,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
  ],
  messagesTypes: [],
  configurables: [],
};

export class IdoContractAbi__factory {
  static readonly abi = _abi;
  static createInterface(): IdoContractAbiInterface {
    return new Interface(_abi) as unknown as IdoContractAbiInterface;
  }
  static connect(
    id: string | AbstractAddress,
    walletOrProvider: BaseWalletLocked | Provider
  ): IdoContractAbi {
    return new Contract(
      id,
      _abi,
      walletOrProvider
    ) as unknown as IdoContractAbi;
  }
}
