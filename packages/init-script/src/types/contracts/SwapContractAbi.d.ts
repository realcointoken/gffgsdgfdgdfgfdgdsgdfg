/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from "fuels";

import type { Enum, Option } from "./common";

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;

export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

interface SwapContractAbiInterface extends Interface {
  functions: {
    initialize: FunctionFragment;
    deposit: FunctionFragment;
    withdraw: FunctionFragment;
    add_liquidity: FunctionFragment;
    remove_liquidity: FunctionFragment;
    swap: FunctionFragment;
    get_pair: FunctionFragment;
    get_reserve: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "initialize",
    values: [ContractIdInput, ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "deposit",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "add_liquidity",
    values: [IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "remove_liquidity",
    values: [IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BigNumberish, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_pair",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_reserve",
    values?: undefined
  ): Uint8Array;

  decodeFunctionData(
    functionFragment: "initialize",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "deposit",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "withdraw",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "add_liquidity",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "remove_liquidity",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "swap", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_pair",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_reserve",
    data: BytesLike
  ): DecodedValue;
}

export class SwapContractAbi extends Contract {
  interface: SwapContractAbiInterface;
  functions: {
    initialize: InvokeFunction<
      [address_0: ContractIdInput, address_1: ContractIdInput],
      void
    >;

    deposit: InvokeFunction<[], void>;

    withdraw: InvokeFunction<
      [amount: BigNumberish, asset_id: ContractIdInput],
      void
    >;

    add_liquidity: InvokeFunction<[to: IdentityInput], BN>;

    remove_liquidity: InvokeFunction<[to: IdentityInput], [BN, BN]>;

    swap: InvokeFunction<
      [amount_0: BigNumberish, amount_1: BigNumberish],
      [BN, BN]
    >;

    get_pair: InvokeFunction<[], [string, string]>;

    get_reserve: InvokeFunction<[], [BN, BN]>;
  };
}
