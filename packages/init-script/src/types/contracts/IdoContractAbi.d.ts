/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from "fuels";

export type RawVecInput = { ptr: any; cap: BigNumberish };

export type RawVecOutput = { ptr: any; cap: BN };

export type VecInput = { buf: RawVecInput; len: BigNumberish };

export type VecOutput = { buf: RawVecOutput; len: BN };

export type InfoInput = {
  address_list: VecInput;
  timeline: VecInput;
  value_list: VecInput;
  switches: VecInput;
};

export type InfoOutput = {
  address_list: VecOutput;
  timeline: VecOutput;
  value_list: VecOutput;
  switches: VecOutput;
};

interface IdoContractAbiInterface extends Interface {
  functions: {
    bid: FunctionFragment;
    cancel: FunctionFragment;
    claim_bid: FunctionFragment;
    claim_lp_token: FunctionFragment;
    get_claimable_token: FunctionFragment;
    get_expected_price: FunctionFragment;
    get_info: FunctionFragment;
    get_lp_token_claimable: FunctionFragment;
    get_settle_result: FunctionFragment;
    get_shares: FunctionFragment;
    initialize: FunctionFragment;
    settle: FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bid", values: [string]): Uint8Array;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [string, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "claim_bid",
    values: [string]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "claim_lp_token",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_claimable_token",
    values: [string]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_expected_price",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_info",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_lp_token_claimable",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_settle_result",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_shares",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [VecInput, VecInput, VecInput, VecInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "settle",
    values?: undefined
  ): Uint8Array;

  decodeFunctionData(functionFragment: "bid", data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: "cancel", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "claim_bid",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "claim_lp_token",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_claimable_token",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_expected_price",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_info",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_lp_token_claimable",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_settle_result",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_shares",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "initialize",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "settle", data: BytesLike): DecodedValue;
}

export class IdoContractAbi extends Contract {
  interface: IdoContractAbiInterface;
  functions: {
    bid: InvokeFunction<[to: string], void>;

    cancel: InvokeFunction<[to: string, amount_: BigNumberish], void>;

    claim_bid: InvokeFunction<[to: string], void>;

    claim_lp_token: InvokeFunction<[amount: BigNumberish], void>;

    get_claimable_token: InvokeFunction<[user_address: string], [BN, BN]>;

    get_expected_price: InvokeFunction<[price: BigNumberish], BN>;

    get_info: InvokeFunction<[], InfoOutput>;

    get_lp_token_claimable: InvokeFunction<[], BN>;

    get_settle_result: InvokeFunction<[], [BN, BN, BN, BN, BN]>;

    get_shares: InvokeFunction<[], [BN, BN]>;

    initialize: InvokeFunction<
      [
        adderss_list: VecInput,
        timeline: VecInput,
        value_list: VecInput,
        switches: VecInput
      ],
      void
    >;

    settle: InvokeFunction<[], boolean>;
  };
}
